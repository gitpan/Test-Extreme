.\" Automatically generated by Pod::Man version 1.02
.\" Thu Aug 22 14:08:47 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Test::Extreme 3"
.TH Test::Extreme 3 "perl v5.6.0" "2002-08-22" "User Contributed Perl Documentation"
.UC
.SH "NAME"
.Vb 1
\&    Test::Extreme - A perlish unit testing framework
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # In your code module ModuleOne.pm
.Ve
.Vb 2
\&    sub foo { return 23 };
\&    sub bar { return 42 };
.Ve
.Vb 1
\&    # In your test module ModuleOneTest.pm
.Ve
.Vb 1
\&    use Test::Extreme;
.Ve
.Vb 2
\&    sub test_foo { assert_equals foo, 23 }    
\&    sub test_bar { assert_equals bar, 42 }
.Ve
.Vb 1
\&    # To run these tests on the command line type
.Ve
.Vb 1
\&    perl -MModuleOneTest -e run_tests
.Ve
.Vb 3
\&    # If you have tests in several modules (say in
\&    # ModuleOneTest.pm, ModuleTwoTest.pm and ModuleThreeTest.pm,
\&    # create AllTests.pm containing precisely the following:
.Ve
.Vb 3
\&    use ModuleOneTest;
\&    use ModuleTwoTest;
\&    use ModuleThreeTest;
.Ve
.Vb 1
\&    1;
.Ve
.Vb 1
\&    # To run all of these tests on the command line type
.Ve
.Vb 1
\&    perl -MAllTests -e run_tests
.Ve
.Vb 2
\&    # If you have tests in different namespaces you can run them
\&    # by typing (for example)
.Ve
.Vb 1
\&    perl -MAllTests -e 'run_tests "namespace1", "namespace2"'
.Ve
.Vb 2
\&    # Also take a look at Test/Extreme.pm which includes its own
\&    # unit tests for how to instrument a module with unit tests
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 5
\&    Test::Extreme is a perlish port of the xUnit testing
\&    framework. It is in the spirit of JUnit, the unit testing
\&    framework for Java, by Kent Beck and Erich Gamma. Instead of
\&    porting the implementation of JUnit we have ported its spirit
\&    to Perl.
.Ve
.Vb 2
\&    The target market for this module is perlish people
\&    everywhere who value laziness above all else.
.Ve
.Vb 7
\&    Test::Extreme is especially written so that it can be easily
\&    and concisely used from Perl programs without turning them
\&    into Java and without inducing object-oriented nightmares in
\&    innocent Perl programmers. It has a shallow learning curve.
\&    The goal is to adopt the unit testing idea minus the OO
\&    cruft, and to make the world a better place by promoting the
\&    virtues of laziness, impatience and hubris.
.Ve
.Vb 3
\&    You test a given unit (a script, a module, whatever) by using
\&    Test::Extreme, which exports the following routines into your
\&    namespace:
.Ve
.Vb 24
\&    assert $x            - $x is true
\&    assert_true $x       - $x is true
\&    assert_false $x      - $x is not true
\&    assert_passed        - the last eval did not die ($@ eq "")
\&    assert_failed        - the last eval caused a die ($@ ne "")
\&    assert_some $x       - $x is true
\&    assert_none          - $x is false
\&    assert_equals $x, $y - recursively tests arrayrefs, hashrefs
\&                           and strings to ensure they have the same 
\&                           contents
\&    assert_contains $string, $list 
\&                         - $list contains $string assert_subset 
\&                           $element_list, $list - $element_list is 
\&                           a subset of $list (both are arrayrefs)
\&    assert_is_array $x   - $x is an arrayref
\&    assert_is_hash $x    - $x is a hashref
\&    assert_is_string $x  - $x is a scalar
\&    assert_size N, $list - the arrayref contains N elements
\&    assert_keys ['k1', 'k2'], $hash 
\&                         - $hash contains k1, k2 as keys
\&    run_tests            - run all tests in package main
\&    run_tests NS1, NS2, ...
\&                         - run all tests in package main, NS1,
\&                           NS2, and so on
.Ve
.Vb 3
\&    For an example on how to use these assert take a look at
\&    Test/ExtremeTest.pm which shows different ways of using these
\&    asserts.
.Ve
.Vb 3
\&    Currently this requires that all your tests live in the
\&    main:: namespace. If you are not sure what that means things
\&    will probably just work seamlessly.
.Ve
.Vb 3
\&    The function run_tests finds all functions that start with
\&    the word test (preceded by zero or more underscores) and runs
\&    them one at a time.
.Ve
.Vb 5
\&    Running the tests generates a status line (a "." for every
\&    successful test run, or an "F" for any failed test run), a
\&    summary result line ("OK" or "FAILURES!!!") and zero or more
\&    lines containing detailed error messages for any failed
\&    tests.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&    Copyright (c) 2002 Asim Jalis, <asimjalis@acm.org>.
.Ve
.Vb 3
\&    All rights reserved. This program is free software; you can
\&    redistribute it and/or modify it under the same terms as Perl
\&    itself.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\&    - Test::Unit
\&    - Test::SimpleUnit
.Ve
